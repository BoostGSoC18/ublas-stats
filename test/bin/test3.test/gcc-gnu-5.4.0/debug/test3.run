test_vector
double compressed
v1 = v2 = [3](1,2,3)
v1.assign_temporary (v2) = [3](1,2,3)
v1.swap (v2) = [3](1,2,3) [3](1,2,3)
v1.zero_vector = [3](0,0,0)
v1 = range/slice [3](1,2,1)
- v1 = [3](-1,-2,-3)
conj (v1) = [3](1,2,3)
v1 + v2 = [3](2,4,6)
v1 - v2 = [3](0,0,0)
1. * v1 = [3](1,2,3)
N * v1 = [3](3,6,9)
v1 * 1. = [3](1,2,3)
v1 * N = [3](3,6,9)
v2 += v1 = [3](2,4,6)
v2 -= v1 = [3](1,2,3)
v2 = v2 + v1 = [3](2,4,6)
v2 = v2 - v1 = [3](1,2,3)
v1 *= 1. = [3](1,2,3)
v1 *= N = [3](3,6,9)
min (v1) = 1
max (v1) = 3
sum (v1) = 6
mean (v1) = 2
mean_iterative (v1) = 2
variance (v1) = 0.666667
variance_iterative (v1) = 0.666667
mode (v1) = 1
median (v1) = 2
norm_1 (v1) = 6
norm_2 (v1) = 3.74166
norm_inf (v1) = 3
index_norm_inf (v1) = 2
inner_prod (v1, v2) = 14
std::complex<double> compressed
v1 = v2 = [3]((1,0),(2,0),(3,0))
v1.assign_temporary (v2) = [3]((1,0),(2,0),(3,0))
v1.swap (v2) = [3]((1,0),(2,0),(3,0)) [3]((1,0),(2,0),(3,0))
v1.zero_vector = [3]((0,0),(0,0),(0,0))
v1 = range/slice [3]((1,0),(2,0),(1,0))
- v1 = [3]((-1,-0),(-2,-0),(-3,-0))
conj (v1) = [3]((1,-0),(2,-0),(3,-0))
v1 + v2 = [3]((2,0),(4,0),(6,0))
v1 - v2 = [3]((0,0),(0,0),(0,0))
1. * v1 = [3]((1,0),(2,0),(3,0))
N * v1 = [3]((3,0),(6,0),(9,0))
v1 * 1. = [3]((1,0),(2,0),(3,0))
v1 * N = [3]((3,0),(6,0),(9,0))
v2 += v1 = [3]((2,0),(4,0),(6,0))
v2 -= v1 = [3]((1,0),(2,0),(3,0))
v2 = v2 + v1 = [3]((2,0),(4,0),(6,0))
v2 = v2 - v1 = [3]((1,0),(2,0),(3,0))
v1 *= 1. = [3]((1,0),(2,0),(3,0))
v1 *= N = [3]((3,0),(6,0),(9,0))
min (v1) = (1,0)
max (v1) = (3,0)
sum (v1) = (6,0)
mean (v1) = (2,0)
mean_iterative (v1) = (2,0)
variance (v1) = (0.666667,0)
variance_iterative (v1) = (0.666667,0)
mode (v1) = (1,0)
median (v1) = (2,0)
norm_1 (v1) = 6
norm_2 (v1) = 3.74166
norm_inf (v1) = 3
index_norm_inf (v1) = 2
inner_prod (v1, v2) = (14,0)
test_matrix_vector
double compressed
row (m, 0) = [3](1,2,3)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,6)
column (m, 1) = [3](2,5,8)
row (m, 2) = [3](7,8,9)
column (m, 2) = [3](3,6,9)
outer_prod (v1, v2) = [3,3]((1,2,3),(2,4,6),(3,6,9))
prod (m1, v1) = [3](14,32,50)
prod (v1, m1) = [3](30,36,42)
min (m1, 0) = [3](1,2,3)
min (m1, 1) = [3](1,4,7)
max (m1, 0) = [3](7,8,9)
max (m1, 1) = [3](3,6,9)
sum (m1, 0) = [3](12,15,18)
sum (m1, 1) = [3](6,15,24)
mean (m1, 0) = [3](4,5,6)
mean (m1, 1) = [3](2,5,8)
variance (m1, 0) = [3](6,6,6)
variance (m1, 1) = [3](0.666667,0.666667,0.666667)
mode (m1, 0) = [3](1,2,3)
mode (m1, 1) = [3](1,4,7)
median (m1, 0) = [3](4,5,6)
median (m1, 1) = [3](2,5,8)
row (m, 0) = [3](1,2,3)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,6)
column (m, 1) = [3](5,5,8)
row (m, 2) = [3](7,8,9)
column (m, 2) = [3](9,6,9)
outer_prod (v1, v2) = [3,3]((1,2,3),(2,4,6),(3,6,9))
prod (m1, v1) = [3](14,32,50)
prod (v1, m1) = [3](51,108,165)
min (m1, 0) = [3](1,2,3)
min (m1, 1) = [3](1,4,7)
max (m1, 0) = [3](7,8,9)
max (m1, 1) = [3](9,6,9)
sum (m1, 0) = [3](20,19,24)
sum (m1, 1) = [3](63,15,24)
mean (m1, 0) = [3](24.6667,9.33333,13)
mean (m1, 1) = [3](15.6667,5,8)
variance (m1, 0) = [3](24.4691,2,1.55556)
variance (m1, 1) = [3](114.455,0.666667,0.666667)
mode (m1, 0) = [3](4,0.666667,0.666667)
mode (m1, 1) = [3](0.666667,4,7)
median (m1, 0) = [3](4,5,7)
median (m1, 1) = [3](5,5,8)
row (m, 0) = [3](1,2,3)
column (m, 0) = [3](1,2,3)
row (m, 1) = [3](2,5,6)
column (m, 1) = [3](2,5,8)
row (m, 2) = [3](8,8,9)
column (m, 2) = [3](3,6,9)
outer_prod (v1, v2) = [3,3]((1,2,3),(2,4,6),(3,6,9))
prod (m1, v1) = [3](14,30,46)
prod (v1, m1) = [3](14,36,212)
min (m1, 0) = [3](1,2,3)
min (m1, 1) = [3](1,2,3)
max (m1, 0) = [3](3,8,9)
max (m1, 1) = [3](3,8,9)
sum (m1, 0) = [3](20,15,18)
sum (m1, 1) = [3](25,26,35)
mean (m1, 0) = [3](28.6667,5,6)
mean (m1, 1) = [3](11.2222,5.33333,7.66667)
variance (m1, 0) = [3](5.86283,6,6)
variance (m1, 1) = [3](2.67969,0.222222,1.55556)
mode (m1, 0) = [3](0.222222,2,3)
mode (m1, 1) = [3](0.222222,2,3)
median (m1, 0) = [3](2,5,6)
median (m1, 1) = [3](2,5,8)
std::complex<double> compressed
row (m, 0) = [3]((1,0),(2,0),(3,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(6,0))
column (m, 1) = [3]((2,0),(5,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(9,0))
column (m, 2) = [3]((3,0),(6,0),(9,0))
outer_prod (v1, v2) = [3,3](((1,0),(2,0),(3,0)),((2,0),(4,0),(6,0)),((3,0),(6,0),(9,0)))
prod (m1, v1) = [3]((14,0),(32,0),(50,0))
prod (v1, m1) = [3]((30,0),(36,0),(42,0))
min (m1, 0) = [3]((1,0),(2,0),(3,0))
min (m1, 1) = [3]((1,0),(4,0),(7,0))
max (m1, 0) = [3]((7,0),(8,0),(9,0))
max (m1, 1) = [3]((3,0),(6,0),(9,0))
sum (m1, 0) = [3]((12,0),(15,0),(18,0))
sum (m1, 1) = [3]((6,0),(15,0),(24,0))
mean (m1, 0) = [3]((4,0),(5,0),(6,0))
mean (m1, 1) = [3]((2,0),(5,0),(8,0))
variance (m1, 0) = [3]((6,0),(6,0),(6,0))
variance (m1, 1) = [3]((0.666667,0),(0.666667,0),(0.666667,0))
mode (m1, 0) = [3]((1,0),(2,0),(3,0))
mode (m1, 1) = [3]((1,0),(4,0),(7,0))
median (m1, 0) = [3]((4,0),(5,0),(6,0))
median (m1, 1) = [3]((2,0),(5,0),(8,0))
row (m, 0) = [3]((1,0),(2,0),(3,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(6,0))
column (m, 1) = [3]((5,0),(5,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(9,0))
column (m, 2) = [3]((9,0),(6,0),(9,0))
outer_prod (v1, v2) = [3,3](((1,0),(2,0),(3,0)),((2,0),(4,0),(6,0)),((3,0),(6,0),(9,0)))
prod (m1, v1) = [3]((14,0),(32,0),(50,0))
prod (v1, m1) = [3]((51,0),(108,0),(165,0))
min (m1, 0) = [3]((1,0),(2,0),(3,0))
min (m1, 1) = [3]((1,0),(4,0),(7,0))
max (m1, 0) = [3]((7,0),(8,0),(9,0))
max (m1, 1) = [3]((9,0),(6,0),(9,0))
sum (m1, 0) = [3]((20,0),(19,0),(24,0))
sum (m1, 1) = [3]((63,0),(15,0),(24,0))
mean (m1, 0) = [3]((24.6667,0),(9.33333,0),(13,0))
mean (m1, 1) = [3]((15.6667,0),(5,0),(8,0))
variance (m1, 0) = [3]((24.4691,0),(2,0),(1.55556,0))
variance (m1, 1) = [3]((114.455,0),(0.666667,0),(0.666667,0))
mode (m1, 0) = [3]((4,0),(0.666667,0),(0.666667,0))
mode (m1, 1) = [3]((0.666667,0),(4,0),(7,0))
median (m1, 0) = [3]((4,0),(5,0),(7,0))
median (m1, 1) = [3]((5,0),(5,0),(8,0))
row (m, 0) = [3]((1,0),(2,0),(3,0))
column (m, 0) = [3]((1,0),(2,0),(3,0))
row (m, 1) = [3]((2,0),(5,0),(6,0))
column (m, 1) = [3]((2,0),(5,0),(8,0))
row (m, 2) = [3]((8,0),(8,0),(9,0))
column (m, 2) = [3]((3,0),(6,0),(9,0))
outer_prod (v1, v2) = [3,3](((1,0),(2,0),(3,0)),((2,0),(4,0),(6,0)),((3,0),(6,0),(9,0)))
prod (m1, v1) = [3]((14,0),(30,0),(46,0))
prod (v1, m1) = [3]((14,0),(36,0),(212,0))
min (m1, 0) = [3]((1,0),(2,0),(3,0))
min (m1, 1) = [3]((1,0),(2,0),(3,0))
max (m1, 0) = [3]((3,0),(8,0),(9,0))
max (m1, 1) = [3]((3,0),(8,0),(9,0))
sum (m1, 0) = [3]((20,0),(15,0),(18,0))
sum (m1, 1) = [3]((25,0),(26,0),(35,0))
mean (m1, 0) = [3]((28.6667,0),(5,0),(6,0))
mean (m1, 1) = [3]((11.2222,0),(5.33333,0),(7.66667,0))
variance (m1, 0) = [3]((5.86283,0),(6,0),(6,0))
variance (m1, 1) = [3]((2.67969,0),(0.222222,0),(1.55556,0))
mode (m1, 0) = [3]((0.222222,0),(2,0),(3,0))
mode (m1, 1) = [3]((0.222222,0),(2,0),(3,0))
median (m1, 0) = [3]((2,0),(5,0),(6,0))
median (m1, 1) = [3]((2,0),(5,0),(8,0))
test_matrix
double compressed_matrix
m1 = m2 = [3,3]((1,2,3),(4,5,6),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,2,3),(4,5,6),(7,8,9))
m1.swap (m2) = [3,3]((1,2,3),(4,5,6),(7,8,9)) [3,3]((1,2,3),(4,5,6),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
m1 = range/slice [3,3]((1,2,3),(4,5,4),(7,2,1))
min (m1) = 1
max (m1) = 9
sum (m1) = 45
mean (m1) = 5
variance (m1) = 6.66667
mode (m1) = 1
median (m1) = 5
- m1 = [3,3]((-1,-2,-3),(-4,-5,-6),(-7,-8,-9))
conj (m1) = [3,3]((1,2,3),(4,5,6),(7,8,9))
m1 + m2 = [3,3]((2,4,6),(8,10,12),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,2,3),(4,5,6),(7,8,9))
N * m1 = [3,3]((3,6,9),(12,15,18),(21,24,27))
m1 * 1. = [3,3]((1,2,3),(4,5,6),(7,8,9))
m1 * N = [3,3]((3,6,9),(12,15,18),(21,24,27))
m2 += m1 = [3,3]((2,4,6),(8,10,12),(14,16,18))
m2 -= m1 = [3,3]((1,2,3),(4,5,6),(7,8,9))
m2 = m2 + m1 = [3,3]((2,4,6),(8,10,12),(14,16,18))
m2 = m2 - m1 = [3,3]((1,2,3),(4,5,6),(7,8,9))
m1 *= 1. = [3,3]((1,2,3),(4,5,6),(7,8,9))
m1 *= N = [3,3]((3,6,9),(12,15,18),(21,24,27))
trans (m1) = [3,3]((1,4,7),(2,5,8),(3,6,9))
herm (m1) = [3,3]((1,4,7),(2,5,8),(3,6,9))
covariance_matrix (m1) = [3,3]((0.666667,0.666667,0.666667),(0.666667,0.666667,0.666667),(0.666667,0.666667,0.666667))
covariance_matrix (m1) = [3,3]((6,6,6),(6,6,6),(6,6,6))
prod (m1, m2) = [3,3]((30,36,42),(66,81,96),(102,126,150))
std::complex<double> compressed_matrix
m1 = m2 = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
m1 = range/slice [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(4,0)),((7,0),(2,0),(1,0)))
min (m1) = (1,0)
max (m1) = (9,0)
sum (m1) = (45,0)
mean (m1) = (5,0)
variance (m1) = (6.66667,0)
mode (m1) = (1,0)
median (m1) = (5,0)
- m1 = [3,3](((-1,-0),(-2,-0),(-3,-0)),((-4,-0),(-5,-0),(-6,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(2,-0),(3,-0)),((4,-0),(5,-0),(6,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(4,0),(6,0)),((8,0),(10,0),(12,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(6,0),(9,0)),((12,0),(15,0),(18,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(6,0),(9,0)),((12,0),(15,0),(18,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(4,0),(6,0)),((8,0),(10,0),(12,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(4,0),(6,0)),((8,0),(10,0),(12,0)),((14,0),(16,0),(18,0)))
m2 = m2 - m1 = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(2,0),(3,0)),((4,0),(5,0),(6,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(6,0),(9,0)),((12,0),(15,0),(18,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((2,0),(5,0),(8,0)),((3,0),(6,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((2,-0),(5,-0),(8,-0)),((3,-0),(6,-0),(9,-0)))
covariance_matrix (m1) = [3,3](((0.666667,0),(0.666667,0),(0.666667,0)),((0.666667,0),(0.666667,0),(0.666667,0)),((0.666667,0),(0.666667,0),(0.666667,0)))
covariance_matrix (m1) = [3,3](((6,0),(6,0),(6,0)),((6,0),(6,0),(6,0)),((6,0),(6,0),(6,0)))
prod (m1, m2) = [3,3](((30,0),(36,0),(42,0)),((66,0),(81,0),(96,0)),((102,0),(126,0),(150,0)))

EXIT STATUS: 0
