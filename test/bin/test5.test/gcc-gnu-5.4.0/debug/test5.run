test_matrix_vector
double, unbounded_array
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,0)
column (m, 1) = [3](0,5,8)
row (m, 2) = [3](7,8,9)
column (m, 2) = [3](0,0,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(2,4,0),(3,6,0))
prod (m1, v1) = [3](1,14,50)
prod (v1, m1) = [3](30,34,27)
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,4,1)
row (m, 1) = [3](4,5,0)
column (m, 1) = [3](0,5,5)
row (m, 2) = [3](0,5,5)
column (m, 2) = [3](0,0,5)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](1,14,14)
prod (v1, m1) = [3](71,266,196)
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,0,0)
row (m, 1) = [3](0,5,0)
column (m, 1) = [3](0,5,8)
row (m, 2) = [3](8,8,9)
column (m, 2) = [3](0,0,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](1,12,46)
prod (v1, m1) = [3](2261,428,414)
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,4,0)
column (m, 1) = [3](0,4,8)
row (m, 2) = [3](7,8,8)
column (m, 2) = [3](0,0,8)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](1,8,32)
prod (v1, m1) = [3](257,320,1024)
std::complex<double>, unbounded_array
row (m, 0) = [3]((1,0),(0,0),(0,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(0,0))
column (m, 1) = [3]((0,0),(5,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(9,0))
column (m, 2) = [3]((0,0),(0,0),(9,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((2,0),(4,0),(0,0)),((3,0),(6,0),(0,0)))
prod (m1, v1) = [3]((1,0),(14,0),(50,0))
prod (v1, m1) = [3]((30,0),(34,0),(27,0))
row (m, 0) = [3]((1,0),(0,0),(0,0))
column (m, 0) = [3]((1,0),(4,0),(1,0))
row (m, 1) = [3]((4,0),(5,0),(0,0))
column (m, 1) = [3]((0,0),(5,0),(5,0))
row (m, 2) = [3]((0,0),(5,0),(5,0))
column (m, 2) = [3]((0,0),(0,0),(5,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((1,0),(14,0),(14,0))
prod (v1, m1) = [3]((71,0),(266,0),(196,0))
row (m, 0) = [3]((1,0),(0,0),(0,0))
column (m, 0) = [3]((1,0),(0,0),(0,0))
row (m, 1) = [3]((0,0),(5,0),(0,0))
column (m, 1) = [3]((0,0),(5,0),(8,0))
row (m, 2) = [3]((8,0),(8,0),(9,0))
column (m, 2) = [3]((0,0),(0,0),(9,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((1,0),(12,0),(46,0))
prod (v1, m1) = [3]((2261,0),(428,0),(414,0))
row (m, 0) = [3]((1,0),(0,0),(0,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(4,0),(0,0))
column (m, 1) = [3]((0,0),(4,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(8,0))
column (m, 2) = [3]((0,0),(0,0),(8,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((1,0),(8,0),(32,0))
prod (v1, m1) = [3]((257,0),(320,0),(1024,0))
double, std::vector
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,0)
column (m, 1) = [3](0,5,8)
row (m, 2) = [3](7,8,9)
column (m, 2) = [3](0,0,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(2,4,0),(3,6,0))
prod (m1, v1) = [3](1,14,50)
prod (v1, m1) = [3](30,34,27)
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,4,1)
row (m, 1) = [3](4,5,0)
column (m, 1) = [3](0,5,5)
row (m, 2) = [3](0,5,5)
column (m, 2) = [3](0,0,5)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](1,14,14)
prod (v1, m1) = [3](71,266,196)
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,0,0)
row (m, 1) = [3](0,5,0)
column (m, 1) = [3](0,5,8)
row (m, 2) = [3](8,8,9)
column (m, 2) = [3](0,0,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](1,12,46)
prod (v1, m1) = [3](2261,428,414)
row (m, 0) = [3](1,0,0)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,4,0)
column (m, 1) = [3](0,4,8)
row (m, 2) = [3](7,8,8)
column (m, 2) = [3](0,0,8)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](1,8,32)
prod (v1, m1) = [3](257,320,1024)
test_matrix
double, unbounded_array
m1 = m2 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.swap (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9)) [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,0,0),(-4,-5,0),(-7,-8,-9))
conj (m1) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 + m2 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
N * m1 = [3,3]((3,0,0),(12,15,0),(21,24,27))
m1 * 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 * N = [3,3]((3,0,0),(12,15,0),(21,24,27))
m2 += m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 -= m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m2 = m2 + m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 = m2 - m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= N = [3,3]((3,0,0),(12,15,0),(21,24,27))
trans (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
herm (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
prod (m1, m2) = [3,3]((1,0,0),(24,25,0),(102,112,81))
m1 = m2 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.swap (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9)) [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,0,0),(-4,-5,0),(-7,-8,-9))
conj (m1) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 + m2 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
N * m1 = [3,3]((3,0,0),(12,15,0),(21,24,27))
m1 * 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 * N = [3,3]((3,0,0),(12,15,0),(21,24,27))
m2 += m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 -= m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m2 = m2 + m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 = m2 - m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= N = [3,3]((3,0,0),(12,15,0),(21,24,27))
trans (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
herm (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
prod (m1, m2) = [3,3]((1,0,0),(24,25,0),(102,112,81))
std::complex<double>, unbounded_array
m1 = m2 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(0,0),(0,0)),((-4,-0),(-5,-0),(0,0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(0,0),(0,0)),((4,-0),(5,-0),(0,0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 = m2 - m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((0,0),(5,0),(8,0)),((0,0),(0,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((0,-0),(5,-0),(8,-0)),((0,-0),(0,-0),(9,-0)))
prod (m1, m2) = [3,3](((1,0),(0,0),(0,0)),((24,0),(25,0),(0,0)),((102,0),(112,0),(81,0)))
m1 = m2 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(0,0),(0,0)),((-4,-0),(-5,-0),(0,0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(0,0),(0,0)),((4,-0),(5,-0),(0,0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 = m2 - m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((0,0),(5,0),(8,0)),((0,0),(0,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((0,-0),(5,-0),(8,-0)),((0,-0),(0,-0),(9,-0)))
prod (m1, m2) = [3,3](((1,0),(0,0),(0,0)),((24,0),(25,0),(0,0)),((102,0),(112,0),(81,0)))
double, std::vector
m1 = m2 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.swap (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9)) [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,0,0),(-4,-5,0),(-7,-8,-9))
conj (m1) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 + m2 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
N * m1 = [3,3]((3,0,0),(12,15,0),(21,24,27))
m1 * 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 * N = [3,3]((3,0,0),(12,15,0),(21,24,27))
m2 += m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 -= m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m2 = m2 + m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 = m2 - m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= N = [3,3]((3,0,0),(12,15,0),(21,24,27))
trans (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
herm (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
prod (m1, m2) = [3,3]((1,0,0),(24,25,0),(102,112,81))
m1 = m2 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.swap (m2) = [3,3]((1,0,0),(4,5,0),(7,8,9)) [3,3]((1,0,0),(4,5,0),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,0,0),(-4,-5,0),(-7,-8,-9))
conj (m1) = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 + m2 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
N * m1 = [3,3]((3,0,0),(12,15,0),(21,24,27))
m1 * 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 * N = [3,3]((3,0,0),(12,15,0),(21,24,27))
m2 += m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 -= m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m2 = m2 + m1 = [3,3]((2,0,0),(8,10,0),(14,16,18))
m2 = m2 - m1 = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= 1. = [3,3]((1,0,0),(4,5,0),(7,8,9))
m1 *= N = [3,3]((3,0,0),(12,15,0),(21,24,27))
trans (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
herm (m1) = [3,3]((1,4,7),(0,5,8),(0,0,9))
prod (m1, m2) = [3,3]((1,0,0),(24,25,0),(102,112,81))
std::complex<double>, std::vector
m1 = m2 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(0,0),(0,0)),((-4,-0),(-5,-0),(0,0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(0,0),(0,0)),((4,-0),(5,-0),(0,0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 = m2 - m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((0,0),(5,0),(8,0)),((0,0),(0,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((0,-0),(5,-0),(8,-0)),((0,-0),(0,-0),(9,-0)))
prod (m1, m2) = [3,3](((1,0),(0,0),(0,0)),((24,0),(25,0),(0,0)),((102,0),(112,0),(81,0)))
m1 = m2 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(0,0),(0,0)),((-4,-0),(-5,-0),(0,0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(0,0),(0,0)),((4,-0),(5,-0),(0,0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(0,0),(0,0)),((8,0),(10,0),(0,0)),((14,0),(16,0),(18,0)))
m2 = m2 - m1 = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(0,0),(0,0)),((4,0),(5,0),(0,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(0,0),(0,0)),((12,0),(15,0),(0,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((0,0),(5,0),(8,0)),((0,0),(0,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((0,-0),(5,-0),(8,-0)),((0,-0),(0,-0),(9,-0)))
prod (m1, m2) = [3,3](((1,0),(0,0),(0,0)),((24,0),(25,0),(0,0)),((102,0),(112,0),(81,0)))

EXIT STATUS: 0
