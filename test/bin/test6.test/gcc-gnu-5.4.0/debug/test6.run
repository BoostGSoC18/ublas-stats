test_matrix_vector
double, unbounded_array
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,8)
column (m, 1) = [3](4,5,8)
row (m, 2) = [3](7,8,9)
column (m, 2) = [3](7,8,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](30,38,50)
prod (v1, m1) = [3](30,38,50)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,1)
row (m, 1) = [3](4,5,4)
column (m, 1) = [3](4,5,5)
row (m, 2) = [3](4,5,5)
column (m, 2) = [3](4,5,5)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](12,20,14)
prod (v1, m1) = [3](260,428,740)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,8)
column (m, 1) = [3](5,5,8)
row (m, 2) = [3](8,8,9)
column (m, 2) = [3](9,8,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](14,36,46)
prod (v1, m1) = [3](3608,1052,1346)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,4,8)
column (m, 1) = [3](4,4,8)
row (m, 2) = [3](7,8,8)
column (m, 2) = [3](7,8,8)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](30,32,32)
prod (v1, m1) = [3](1252,1400,1490)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,4,8)
column (m, 1) = [3](4,4,8)
row (m, 2) = [3](7,8,8)
column (m, 2) = [3](7,8,8)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](30,32,32)
prod (v1, m1) = [3](1252,1400,1490)
std::complex<double>, unbounded_array
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(8,0))
column (m, 1) = [3]((4,0),(5,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(9,0))
column (m, 2) = [3]((7,0),(8,0),(9,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((30,0),(38,0),(50,0))
prod (v1, m1) = [3]((30,0),(38,0),(50,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(1,0))
row (m, 1) = [3]((4,0),(5,0),(4,0))
column (m, 1) = [3]((4,0),(5,0),(5,0))
row (m, 2) = [3]((4,0),(5,0),(5,0))
column (m, 2) = [3]((4,0),(5,0),(5,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((12,0),(20,0),(14,0))
prod (v1, m1) = [3]((260,0),(428,0),(740,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(8,0))
column (m, 1) = [3]((5,0),(5,0),(8,0))
row (m, 2) = [3]((8,0),(8,0),(9,0))
column (m, 2) = [3]((9,0),(8,0),(9,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((14,0),(36,0),(46,0))
prod (v1, m1) = [3]((3608,0),(1052,0),(1346,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(4,0),(8,0))
column (m, 1) = [3]((4,0),(4,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(8,0))
column (m, 2) = [3]((7,0),(8,0),(8,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((30,0),(32,0),(32,0))
prod (v1, m1) = [3]((1252,0),(1400,0),(1490,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(4,0),(8,0))
column (m, 1) = [3]((4,0),(4,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(8,0))
column (m, 2) = [3]((7,0),(8,0),(8,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((30,0),(32,0),(32,0))
prod (v1, m1) = [3]((1252,0),(1400,0),(1490,0))
double, std::vector
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,8)
column (m, 1) = [3](4,5,8)
row (m, 2) = [3](7,8,9)
column (m, 2) = [3](7,8,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](30,38,50)
prod (v1, m1) = [3](30,38,50)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,1)
row (m, 1) = [3](4,5,4)
column (m, 1) = [3](4,5,5)
row (m, 2) = [3](4,5,5)
column (m, 2) = [3](4,5,5)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](12,20,14)
prod (v1, m1) = [3](260,428,740)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,5,8)
column (m, 1) = [3](5,5,8)
row (m, 2) = [3](8,8,9)
column (m, 2) = [3](9,8,9)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](14,36,46)
prod (v1, m1) = [3](3608,1052,1346)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,4,8)
column (m, 1) = [3](4,4,8)
row (m, 2) = [3](7,8,8)
column (m, 2) = [3](7,8,8)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](30,32,32)
prod (v1, m1) = [3](1252,1400,1490)
row (m, 0) = [3](1,4,7)
column (m, 0) = [3](1,4,7)
row (m, 1) = [3](4,4,8)
column (m, 1) = [3](4,4,8)
row (m, 2) = [3](7,8,8)
column (m, 2) = [3](7,8,8)
outer_prod (v1, v2) = [3,3]((0,0,0),(0,4,0),(0,0,0))
prod (m1, v1) = [3](30,32,32)
prod (v1, m1) = [3](1252,1400,1490)
std::complex<double>, std::vector
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(8,0))
column (m, 1) = [3]((4,0),(5,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(9,0))
column (m, 2) = [3]((7,0),(8,0),(9,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((30,0),(38,0),(50,0))
prod (v1, m1) = [3]((30,0),(38,0),(50,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(1,0))
row (m, 1) = [3]((4,0),(5,0),(4,0))
column (m, 1) = [3]((4,0),(5,0),(5,0))
row (m, 2) = [3]((4,0),(5,0),(5,0))
column (m, 2) = [3]((4,0),(5,0),(5,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((12,0),(20,0),(14,0))
prod (v1, m1) = [3]((260,0),(428,0),(740,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(5,0),(8,0))
column (m, 1) = [3]((5,0),(5,0),(8,0))
row (m, 2) = [3]((8,0),(8,0),(9,0))
column (m, 2) = [3]((9,0),(8,0),(9,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((14,0),(36,0),(46,0))
prod (v1, m1) = [3]((3608,0),(1052,0),(1346,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(4,0),(8,0))
column (m, 1) = [3]((4,0),(4,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(8,0))
column (m, 2) = [3]((7,0),(8,0),(8,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((30,0),(32,0),(32,0))
prod (v1, m1) = [3]((1252,0),(1400,0),(1490,0))
row (m, 0) = [3]((1,0),(4,0),(7,0))
column (m, 0) = [3]((1,0),(4,0),(7,0))
row (m, 1) = [3]((4,0),(4,0),(8,0))
column (m, 1) = [3]((4,0),(4,0),(8,0))
row (m, 2) = [3]((7,0),(8,0),(8,0))
column (m, 2) = [3]((7,0),(8,0),(8,0))
outer_prod (v1, v2) = [3,3](((0,0),(0,0),(0,0)),((0,0),(4,0),(0,0)),((0,0),(0,0),(0,0)))
prod (m1, v1) = [3]((30,0),(32,0),(32,0))
prod (v1, m1) = [3]((1252,0),(1400,0),(1490,0))
test_matrix
double, unbounded_array
m1 = m2 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.swap (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9)) [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,-4,-7),(-4,-5,-8),(-7,-8,-9))
conj (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 + m2 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
N * m1 = [3,3]((3,12,21),(12,15,24),(21,24,27))
m1 * 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 * N = [3,3]((3,12,21),(12,15,24),(21,24,27))
m2 += m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 -= m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m2 = m2 + m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 = m1 - m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= N = [3,3]((3,12,21),(12,15,24),(21,24,27))
trans (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
herm (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
prod (m1, m2) = [3,3]((66,80,102),(80,105,140),(102,140,194))
m1 = m2 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.swap (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9)) [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,-4,-7),(-4,-5,-8),(-7,-8,-9))
conj (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 + m2 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
N * m1 = [3,3]((3,12,21),(12,15,24),(21,24,27))
m1 * 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 * N = [3,3]((3,12,21),(12,15,24),(21,24,27))
m2 += m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 -= m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m2 = m2 + m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 = m1 - m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= N = [3,3]((3,12,21),(12,15,24),(21,24,27))
trans (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
herm (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
prod (m1, m2) = [3,3]((66,80,102),(80,105,140),(102,140,194))
m1 = m2 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.swap (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9)) [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,-4,-7),(-4,-5,-8),(-7,-8,-9))
conj (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 + m2 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
N * m1 = [3,3]((3,12,21),(12,15,24),(21,24,27))
m1 * 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 * N = [3,3]((3,12,21),(12,15,24),(21,24,27))
m2 += m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 -= m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m2 = m2 + m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 = m1 - m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= N = [3,3]((3,36,63),(36,15,72),(63,72,27))
trans (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
herm (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
prod (m1, m2) = [3,3]((66,80,102),(80,105,140),(102,140,194))
std::complex<double>, unbounded_array
m1 = m2 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(-4,-0),(-7,-0)),((-4,-0),(-5,-0),(-8,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 = m1 - m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
prod (m1, m2) = [3,3](((66,0),(80,0),(102,0)),((80,0),(105,0),(140,0)),((102,0),(140,0),(194,0)))
m1 = m2 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(-4,-0),(-7,-0)),((-4,-0),(-5,-0),(-8,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 = m1 - m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
prod (m1, m2) = [3,3](((66,0),(80,0),(102,0)),((80,0),(105,0),(140,0)),((102,0),(140,0),(194,0)))
m1 = m2 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(-4,-0),(-7,-0)),((-4,-0),(-5,-0),(-8,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 = m1 - m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(36,0),(63,0)),((36,0),(15,0),(72,0)),((63,0),(72,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
prod (m1, m2) = [3,3](((66,0),(80,0),(102,0)),((80,0),(105,0),(140,0)),((102,0),(140,0),(194,0)))
double, std::vector
m1 = m2 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.swap (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9)) [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,-4,-7),(-4,-5,-8),(-7,-8,-9))
conj (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 + m2 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
N * m1 = [3,3]((3,12,21),(12,15,24),(21,24,27))
m1 * 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 * N = [3,3]((3,12,21),(12,15,24),(21,24,27))
m2 += m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 -= m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m2 = m2 + m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 = m1 - m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= N = [3,3]((3,12,21),(12,15,24),(21,24,27))
trans (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
herm (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
prod (m1, m2) = [3,3]((66,80,102),(80,105,140),(102,140,194))
m1 = m2 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.swap (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9)) [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,-4,-7),(-4,-5,-8),(-7,-8,-9))
conj (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 + m2 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
N * m1 = [3,3]((3,12,21),(12,15,24),(21,24,27))
m1 * 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 * N = [3,3]((3,12,21),(12,15,24),(21,24,27))
m2 += m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 -= m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m2 = m2 + m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 = m1 - m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= N = [3,3]((3,12,21),(12,15,24),(21,24,27))
trans (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
herm (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
prod (m1, m2) = [3,3]((66,80,102),(80,105,140),(102,140,194))
m1 = m2 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.assign_temporary (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.swap (m2) = [3,3]((1,4,7),(4,5,8),(7,8,9)) [3,3]((1,4,7),(4,5,8),(7,8,9))
m1.zero_matrix = [3,3]((0,0,0),(0,0,0),(0,0,0))
- m1 = [3,3]((-1,-4,-7),(-4,-5,-8),(-7,-8,-9))
conj (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 + m2 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m1 - m2 = [3,3]((0,0,0),(0,0,0),(0,0,0))
1. * m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
N * m1 = [3,3]((3,12,21),(12,15,24),(21,24,27))
m1 * 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 * N = [3,3]((3,12,21),(12,15,24),(21,24,27))
m2 += m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 -= m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m2 = m2 + m1 = [3,3]((2,8,14),(8,10,16),(14,16,18))
m2 = m1 - m1 = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= 1. = [3,3]((1,4,7),(4,5,8),(7,8,9))
m1 *= N = [3,3]((3,36,63),(36,15,72),(63,72,27))
trans (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
herm (m1) = [3,3]((1,4,7),(4,5,8),(7,8,9))
prod (m1, m2) = [3,3]((66,80,102),(80,105,140),(102,140,194))
std::complex<double>, std::vector
m1 = m2 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(-4,-0),(-7,-0)),((-4,-0),(-5,-0),(-8,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 = m1 - m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
prod (m1, m2) = [3,3](((66,0),(80,0),(102,0)),((80,0),(105,0),(140,0)),((102,0),(140,0),(194,0)))
m1 = m2 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(-4,-0),(-7,-0)),((-4,-0),(-5,-0),(-8,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 = m1 - m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
prod (m1, m2) = [3,3](((66,0),(80,0),(102,0)),((80,0),(105,0),(140,0)),((102,0),(140,0),(194,0)))
m1 = m2 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.assign_temporary (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.swap (m2) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0))) [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1.zero_matrix = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
- m1 = [3,3](((-1,-0),(-4,-0),(-7,-0)),((-4,-0),(-5,-0),(-8,-0)),((-7,-0),(-8,-0),(-9,-0)))
conj (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
m1 + m2 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m1 - m2 = [3,3](((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)),((0,0),(0,0),(0,0)))
1. * m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
N * m1 = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m1 * 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 * N = [3,3](((3,0),(12,0),(21,0)),((12,0),(15,0),(24,0)),((21,0),(24,0),(27,0)))
m2 += m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 -= m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m2 = m2 + m1 = [3,3](((2,0),(8,0),(14,0)),((8,0),(10,0),(16,0)),((14,0),(16,0),(18,0)))
m2 = m1 - m1 = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= 1. = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
m1 *= N = [3,3](((3,0),(36,0),(63,0)),((36,0),(15,0),(72,0)),((63,0),(72,0),(27,0)))
trans (m1) = [3,3](((1,0),(4,0),(7,0)),((4,0),(5,0),(8,0)),((7,0),(8,0),(9,0)))
herm (m1) = [3,3](((1,-0),(4,-0),(7,-0)),((4,-0),(5,-0),(8,-0)),((7,-0),(8,-0),(9,-0)))
prod (m1, m2) = [3,3](((66,0),(80,0),(102,0)),((80,0),(105,0),(140,0)),((102,0),(140,0),(194,0)))

EXIT STATUS: 0
